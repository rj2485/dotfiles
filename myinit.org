#+STARTIP: overview

* Base Setup
** Interface Setup
   Sets up the interface
   - Gets rid of the startup screen
   - Allows y and n to sub in for yes and no
   - Allows f5 to reload a file

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)

     (fset 'yes-or-no-p 'y-or-n-p)
     (global-set-key (kbd "<f5>") 'revert-buffer)

     (defalias 'list-buffers 'ibuffer-other-window)

     (global-hl-line-mode t)

     (set-face-background 'hl-line "#5e5e5e")

     (use-package beacon
       :ensure t
       :config
       (beacon-mode 1)
       (setq beacon-color "#666000"))

     (use-package hungry-delete
       :ensure t
       :config
       (global-hungry-delete-mode))

     (use-package expand-region
       :ensure t
       :config
       (global-set-key (kbd "C-q") 'er/expand-region))

     (use-package iedit
       :ensure t
       :config
       (global-set-key (kbd "M-q") 'iedit-mode))

     (setq save-interprogram-paste-before-kill t)

     (global-auto-revert-mode 1)
     (setq auto-revert-verbose nil)
   #+END_SRC

** narrow and widen
   Sets up sane narrowing and widening.

   #+BEGIN_SRC emacs-lisp
     (defun narrow-or-widen-dwim (p)
       "Widen if buffer is narrowed, narrow-dwim otherwise.
     Dwim means: region, org-src-block, org-subtree, or
     defun, whichever applies first. Narrowing to
     org-src-block actually calls `org-edit-src-code'.

     With prefix P, don't widen, just narrow even if buffer
     is already narrowed."
       (interactive "P")
       (declare (interactive-only))
       (cond ((and (buffer-narrowed-p) (not p)) (widen))
	     ((region-active-p)
	      (narrow-to-region (region-beginning)
				(region-end)))
	     ((derived-mode-p 'org-mode)
	      ;; `org-edit-src-code' is not a real narrowing
	      ;; command. Remove this first conditional if
	      ;; you don't want it.
	      (cond ((ignore-errors (org-edit-src-code) t)
		     (delete-other-windows))
		    ((ignore-errors (org-narrow-to-block) t))
		    (t (org-narrow-to-subtree))))
	     ((derived-mode-p 'latex-mode)
	      (LaTeX-narrow-to-environment))
	     (t (narrow-to-defun))))

     (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
   #+END_SRC

   #+RESULTS:
   : narrow-or-widen-dwim

** try
   Sets up the try package

   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC

** which-key
   Sets up the which-key package

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC

** zenburn-theme
   I like the zenburn theme.
   
   #+begin_src emacs-lisp
     (use-package zenburn-theme
       :ensure t
       :config (load-theme 'zenburn t))
   #+end_src

** ace-window
   ace-window setup.

   #+begin_src emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (global-set-key [remap other-window] 'ace-window)
       )

   #+end_src
p
** counsel
   counsel setup.
      
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind
       (("M-y" . counsel-yank-pop)
	:map ivy-minibuffer-map
	("M-y" . ivy-next-line)))
   #+END_SRC

** ivy
   ivy setup
   
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))
   #+END_SRC

** swiper
   swiper setup.
   
   #+begin_src emacs-lisp
       (use-package swiper
	 :ensure t
	 :bind (("C-s" . swiper)
		("C-r" . swiper)
		("C-c C-r" . ivy-resume)
		("M-x" . counsel-M-x)
		("C-x C-f" . counsel-find-file))
	 :config
	 (progn
	   (ivy-mode 1)
	   (setq ivy-use-virtual-buffers t)
	   (setq ivy-display-style 'fancy)
	   (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	   ))
   #+end_src
** avy
   avy setup.
   
   #+begin_src emacs-lisp
     (use-package avy
       :ensure t
       :bind ("M-s" . avy-goto-char))
   #+end_src
** auto-complete
   auto-complete setup.
   
   #+begin_src emacs-lisp
     (use-package auto-complete
       :ensure t
       :init
       (progn
         (ac-config-default)
         (global-auto-complete-mode t)
         ))
   #+end_src
** flycheck
   flycheck setup.
      
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode t))
   #+END_SRC
** yasnippet
   yasnippet setup.

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
       (yas-global-mode 1))
   #+END_SRC
** undo-tree
   undo-tree setup

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :init
       (global-undo-tree-mode))
   #+END_SRC

* Various Language Environment Setups
** Python Development
*** jedi
    jedi setup
    
    #+BEGIN_SRC emacs-lisp
      (use-package jedi
	:ensure t
	:init
	(add-hook 'python-mode-hook 'jedi:setup)
	(add-hook 'python-mode-hook 'jedi:ac-setup))
    #+END_SRC

** HTML / CSS / JINJA etc
*** web-mode
    Enables web development mode and configures it.
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
	:ensure t
	:config
	(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	(setq web-mode-engines-alist
	      '(("django" . "\\.html\\'")))
	(setq web-mode-ac-sources-alist
	      '(("css" . (ac-source-css-property))
		("html" . (ac-source-words-in-buffer ac-source-abbrev))))

	(setq web-mode-enable-auto-closing t)
	(setq web-mode-enable-auto-quoting t)
	)
    #+END_SRC

* org-mode setup
** org-bullets
   org-bullets setup.

   #+begin_src emacs-lisp
     (use-package org-bullets
	 :ensure t
	 :config
	 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

   #+end_src
** Reveal.js
   reveal.js setup
   
   #+begin_src emacs-lisp
     (require 'ox-reveal)

     (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0")
     (setq org-reveal-mathjax t)

     (use-package htmlize
       :ensure t)
   #+end_src
** org-capture setup
   org-capture setup.  The fun stuff.
   
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c c") 'org-capture)

     (setq org-capture-templates
	   '(("a" "Calendar Items" entry (file+headline  "~/orgfiles/gcal.org" "Calendar Items")
	      "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
	     ("n" "Note" entry (file+headline "~/orgfiles/notes.org" "Notes")
	      "* Note %?\n%T")
	     ("l" "Link" entry (file+headline "~/orgfiles/links.org" "Links")
	      "* %? %^L %^g \n%T" :prepend t)
	     ("t" "To Do Item" entry (file+headline "~/orgfiles/i.org" "To Do Items")
	      "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n" :prepend t)
	     ("j" "Journal" entry (file+datetree "~/orgfiles/journal.org")
	      "* %?\nEntered on %U\n  %i\n  %a")))
   #+END_SRC

* Shortcuts to remember
  - C-( starts a macro
  - C-) stops a macro
  - C-e runs a macro
  - C-, C-. C-? for python documentation
  - C-x u for undo tree
  - <s-TAB
  - C-q expand-region thing
  - M-q iedit mode
  - C-x n narrow-widen-dwim
  - C-c C-e w surrounds marked area in html tag
  - C-c C-f folds html
** TODO elpy



   
   
